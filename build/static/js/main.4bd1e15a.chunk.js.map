{"version":3,"sources":["CalendarDivs/MonthsStyle.js","CalendarDivs/DisplayDays.js","CalendarDivs/DisplayMonth.js","CalendarDivs/DefaultMonths.js","CalendarDivs/MonthsIndex.js","App.js","serviceWorker.js","index.js"],"names":["BackgroundStyle","backgroundColor","position","width","height","Top","bottom","MonthsStyle","float","margin","borderRadius","border","color","cursor","CloseDiv","DayStyle","DisplayDays","props","checkDays","month","state","DaysDivs","length","ThisYear","Date","getUTCFullYear","AddDay","getDate","DayNr","this","MonthNumb","getDay","e","i","DayName","push","style","key","React","Component","DisplayMonth","id","onClick","MonthStat","fontSize","fontWeight","MonthName","MonthNr","Months","ElementID","a","target","setState","thisMonthNr","divVisibility","Object","entries","Number","M","thisMonthName","Visibility","checkVisibility","map","bind","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4bd1e15a.chunk.js","sourcesContent":["\r\nconst BackgroundStyle ={\r\n    backgroundColor:\"white\",\r\n    position:\"absolute\",\r\n    width:\"100%\",\r\n    height:\"100%\",\r\n    Top:\"220px\",\r\n    bottom: \"0\"\r\n}\r\n\r\nconst invisible ={\r\n    display:\"none\"\r\n}\r\n\r\nconst MonthsStyle ={\r\n    height:\"100px\",\r\n    width:\"100px\",\r\n    float:\"left\",\r\n    margin:\"7px\",\r\n    borderRadius:\"20px\",\r\n    backgroundColor: \"white\",\r\n    border:\"3px solid #0066cc\",\r\n    color:\"#0066cc\",\r\n    cursor:\"pointer\"\r\n}\r\n\r\n\r\nconst CloseDiv ={\r\n    borderRadius:\"30px\",\r\n    backgroundColor: \"#0066cc\",\r\n    border:\"3px solid #0066cc\",\r\n    color:\"white\",\r\n    height:\"70px\",\r\n    width:\"70px\",\r\n    float:\"right\",\r\n    cursor:\"pointer\"\r\n}\r\n\r\nconst DayStyle={\r\n    borderRadius:\"20px\",\r\n    backgroundColor: \"white\",\r\n    border:\"3px solid #0066cc\",\r\n    color:\"#0066cc\",\r\n    height:\"100px\",\r\n    width:\"100px\",\r\n    float:\"left\",\r\n    margin:\"7px\"\r\n}\r\n\r\nexport {BackgroundStyle,MonthsStyle,invisible,CloseDiv,DayStyle} ","import React from 'react';\r\nimport {DayStyle} from './MonthsStyle'\r\n\r\nexport default class DisplayDays extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            DaysDivs:[]\r\n        }\r\n    }\r\n\r\n\r\n\r\n    DayName(DayNr){\r\n        var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        var current_date = new Date();\r\n        var ThisYear = current_date.getUTCFullYear();\r\n        const date = new Date(ThisYear,this.props.MonthNumb-1,DayNr)\r\n        return days[date.getDay()]\r\n    }\r\n\r\n    checkDays=(month)=>{\r\n        if(this.state.DaysDivs.length<1){\r\n            var current_date = new Date();\r\n            var ThisYear = current_date.getUTCFullYear();\r\n            this.AddDay(new Date(ThisYear, month, 0).getDate());\r\n            return new Date(ThisYear, month, 0).getDate();\r\n        }\r\n       };\r\n\r\n       AddDay(e){\r\n        for(var i =1;i<=e;i++){ \r\n            this.DayName(i)\r\n            this.state.DaysDivs.push(<div style={DayStyle} key={\"Day\"+i}><p> {i}</p><p>{this.DayName(i)}</p></div> )\r\n        }\r\n    }\r\n\r\n    render(){\r\n        this.checkDays(this.props.MonthNumb)\r\n        return(\r\n            <div>\r\n                <div>{this.state.DaysDivs}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {BackgroundStyle,CloseDiv} from './MonthsStyle';\r\nimport DisplayDays from './DisplayDays'\r\nexport default class DisplayMonth extends React.Component{\r\n\r\n  render(){\r\n    return(\r\n    <div style={BackgroundStyle}>\r\n      <div id=\"CloseDiv\" style={CloseDiv} onClick={this.props.MonthStat}>\r\n        <p  style={{fontSize:\"15px\"}}>Back to Months</p>\r\n      </div>\r\n        <h1 style={{fontWeight:\"bold\",color:'#0066cc'}} >{this.props.MonthName}</h1>\r\n        \r\n        <DisplayDays MonthNumb={this.props.MonthNr} />\r\n    </div>\r\n    )\r\n  }\r\n  \r\n}","import React from 'react';\r\nimport {MonthsStyle} from './MonthsStyle';\r\nimport DisplayMonth from './DisplayMonth';\r\n\r\nexport default class Months extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state= {\r\n            Months:[\r\n                {MonthNr:1,MonthName:\"January\"},\r\n                {MonthNr:2,MonthName:\"February\"},\r\n                {MonthNr:3,MonthName:\"March\"},\r\n                {MonthNr:4,MonthName:\"April\"},\r\n                {MonthNr:5,MonthName:\"May\"},\r\n                {MonthNr:6,MonthName:\"June\"},\r\n                {MonthNr:7,MonthName:\"July\"},\r\n                {MonthNr:8,MonthName:\"August\"},\r\n                {MonthNr:9,MonthName:\"September\"},\r\n                {MonthNr:10,MonthName:\"October\"},\r\n                {MonthNr:11,MonthName:\"November\"},\r\n                {MonthNr:12,MonthName:\"December\"},\r\n            ],\r\n            thisMonthNr:0,\r\n            thisMonthName:null,\r\n            divVisibility:false\r\n        }\r\n    }\r\n    ElementID=(e)=>{\r\n        const a = e.target.id\r\n        this.setState({thisMonthNr:a})\r\n        this.setState({divVisibility:true})\r\n        for(var i=0;i<Object.entries(this.state.Months).length;i++){\r\n            if( Number(a) ===Object.entries(this.state.Months)[i][1].MonthNr){\r\n                const M = Object.entries(this.state.Months)[i][1].MonthName\r\n                this.setState({thisMonthName:M})\r\n                break\r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n\r\n//When month pressed, months dissapear\r\n//When month X pressed, months appear\r\n\r\n    Visibility=()=>{    \r\n        this.setState({divVisibility:false})\r\n    }\r\n    render() {\r\n        let checkVisibility =this.state.divVisibility\r\n        return(\r\n          <div>\r\n              <h1 style={{color:'#0066cc'}}>{new Date().getUTCFullYear()}</h1>\r\n              {this.state.Months.map(({MonthNr,MonthName}) => (\r\n                  <button style={MonthsStyle} key={MonthName} id={MonthNr} onClick={this.ElementID}>{MonthName}</button>\r\n              ))}\r\n              <div>\r\n              {checkVisibility?<DisplayMonth MonthName={this.state.thisMonthName} MonthNr={this.state.thisMonthNr} MonthStat={this.Visibility.bind(this)} />:null}\r\n              </div>\r\n          </div>\r\n        )\r\n      }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Months from './DefaultMonths';\r\n\r\nfunction ThisYear(){\r\n    return(\r\n        <div>\r\n            <Months />            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThisYear;\r\n","import React from 'react';\nimport './App.css';\nimport ThisYear from './CalendarDivs/MonthsIndex';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThisYear />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}